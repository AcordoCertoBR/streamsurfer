// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// KinesisQueue is an autogenerated mock type for the KinesisQueue type
type KinesisQueue struct {
	mock.Mock
}

// Enqueue provides a mock function with given fields: data
func (_m *KinesisQueue) Enqueue(data map[string]interface{}) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with no fields
func (_m *KinesisQueue) Flush() ([]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKinesisQueue creates a new instance of KinesisQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKinesisQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *KinesisQueue {
	mock := &KinesisQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
